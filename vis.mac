# Create empty scene
#
/vis/scene/create
/vis/open OGLSQt 1000x1000-0+0

# Draw the scene
#
/vis/drawVolume
/vis/viewer/set/viewpointThetaPhi 90. 0. deg
/vis/viewer/zoom 1.5
/vis/viewer/flush

/vis/scene/add/scale   # Simple scale line
/vis/scene/add/axes    # Simple axes: x=red, y=green, z=blue.

# Specify style (surface, wireframe, auxiliary edges,...)
#
/vis/viewer/set/style s
#/vis/viewer/set/auxiliaryEdge true
#/vis/viewer/set/lineSegmentsPerCircle 100

# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories
/vis/modeling/trajectories/create/drawByCharge
#/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts true
#/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 10
/vis/scene/endOfEventAction accumulate

# Particle Filter
#
/vis/filtering/trajectories/create/particleFilter
/vis/filtering/trajectories/particleFilter-0/add gamma
/vis/filtering/trajectories/particleFilter-0/add e-
/vis/filtering/trajectories/particleFilter-0/add alpha
/vis/filtering/trajectories/particleFilter-0/add proton

# Choose Particle Colour
#
/vis/modeling/trajectories/create/drawByParticleID
/vis/modeling/trajectories/drawByParticleID-0/set gamma yellow
/vis/modeling/trajectories/drawByParticleID-0/set e- green
/vis/modeling/trajectories/drawByParticleID-0/set alpha red
/vis/modeling/trajectories/drawByParticleID-0/set proton blue

# Background Colour
#
/vis/viewer/set/background 0 0 0 !

# Decorations
# Name
/vis/set/textColour green
/vis/set/textLayout right
/vis/scene/add/text2D 0.9 -.9 24 ! ! SBS Geometry
# or, if your system does not support right-adjustment
#/vis/scene/add/text2D 0 -.9 24 ! ! exampleB1
/vis/set/textLayout    # Revert to normal (left adjusted) layout
/vis/set/textColour    # Revert to default text colour (blue)
#
# Axes, scale, etc.
/vis/scene/add/scale   # Simple scale line
/vis/scene/add/axes    # Simple axes: x=red, y=green, z=blue.
/vis/scene/add/eventID # Drawn at end of event
#/vis/scene/add/date    # Date stamp
/vis/scene/add/logo2D  # Simple logo
#/vis/scene/add/logo    # 3D logo
#

# Set name for the output file
#
/analysis/setFileName VIS_TEST

#verbose level setting
#
/tracking/verbose 1

# source type
#
#/gps/particle e-
/gps/particle gamma


#The default value of the time threshold for radioactive decays of ions - above which these decays are ignored - has been changed, from 10^27 ns (i.e. about twice the age of the universe) to 1 year. For applications where radioactive decays of ions do play an important role, it is recommended to increase the default time threshold of these decays to a very high value, e.g. 1.0e+60 years. This can be done in either one of the following three ways:
#Via UI command, e.g. /process/had/rdm/thresholdForVeryLongDecayTime 1.0e+60 year, (command to be used after /run/initialization);
#Via C++ interface, e.g. G4HadronicParameters::Instance()->SetTimeThresholdForRadioactiveDecay( 1.0e+60*CLHEP::year ) (to be placed in the main program before run initialization);
#Via the second parameter of the constructor of the class G4RadioactiveDecay (for analogue mode only) or G4Radioactivation (for both analogue or biased mode), e.g. G4RadioactiveDecay( "RadioactiveDecay", 1.0e+60*CLHEP::year ) or G4Radioactivation( "Radioactivation", 1.0e+60*CLHEP::year ) (this is for custom physics lists, before run initialization).

/process/had/rdm/thresholdForVeryLongDecayTime 1.0e+60 year

#/gps/particle ion
#/gps/ion 38 90 0 0
#/gps/energy 0. keV


#source geometry
#
#/gps/pos/type Point
#/gps/ang/type iso
#/#gps/pos/type Plane
#/gps/pos/shape Circle

#source poistion
/gps/pos/centre 0. 0. 60 mm
#/gps/pos/centre 50. 0. -9.5 mm
#/gps/pos/radius 1.02 cm
#/gps/pos/radius 2.0 cm
/gps/pos/radius 0.1 mm
/gps/pos/rot1 0 1 1
#/gps/pos/halfz 0.01 mm

/gps/pos/confine physSourceCap

#source distribution
/gps/direction 0 0 -1
#/gps/direction -1 0 0

/gps/ang/type cos
/gps/ang/mintheta 0. deg
/gps/ang/maxtheta 90. deg

# source energy
/gps/particle e-
#/gps/energy 0.662 MeV
/gps/energy 1 MeV

# run
/run/beamOn 10